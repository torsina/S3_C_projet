name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Update stuff
        run: sudo apt-get -y update

      - name: Install sphinx, breathe
        run: sudo pip3 install -U sphinx breathe

      - name: Install Valgrind, Doxygen, autoconf, libtool
        run: sudo apt-get -y install valgrind doxygen autoconf libtool tree

      - name: Clone libyaml
        working-directory: ${{runner.workspace}}/..
        run: git clone https://github.com/yaml/libyaml.git

      - name: Build & install libyaml
        working-directory: ${{runner.workspace}}/../libyaml
        run: ./bootstrap ; ./configure ; cmake . ; sudo make ; sudo make install

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: ctest -C $BUILD_TYPE --output-on-failure

      - name: Build docs 2
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: make docs

      - name: Build docs
        run: python3 ./test_docs.py

  lint:
    runs-on: ubuntu-latest
      steps:
          - uses: actions/checkout@v1

          - name: Create Build Environment
            run: cmake -E make_directory ${{runner.workspace}}/build

          - name: Update stuff
            run: sudo apt-get -y update

          - name: Install cclint
            run: sudo pip install -U cclint

          - name: Run cclint
            run: cclint --recursive --extensions=c,h,inc ./
